diff --git a/src/core/nginx.c b/src/core/nginx.c
index 48a20e9..83d6c6e 100644
--- a/src/core/nginx.c
+++ b/src/core/nginx.c
@@ -1134,29 +1134,10 @@ ngx_core_module_init_conf(ngx_cycle_t *cycle, void *conf)
 #if !(NGX_WIN32)
 
     if (ccf->user == (uid_t) NGX_CONF_UNSET_UINT && geteuid() == 0) {
-        struct group   *grp;
-        struct passwd  *pwd;
-
-        ngx_set_errno(0);
-        pwd = getpwnam(NGX_USER);
-        if (pwd == NULL) {
-            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                          "getpwnam(\"" NGX_USER "\") failed");
-            return NGX_CONF_ERROR;
-        }
-
-        ccf->username = NGX_USER;
-        ccf->user = pwd->pw_uid;
-
         ngx_set_errno(0);
-        grp = getgrnam(NGX_GROUP);
-        if (grp == NULL) {
-            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                          "getgrnam(\"" NGX_GROUP "\") failed");
-            return NGX_CONF_ERROR;
-        }
-
-        ccf->group = grp->gr_gid;
+//        ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
+//                      "getpwnam(\"" NGX_USER "\") disabled for static build, run as super user");
+        return NGX_CONF_OK;
     }
 
 
@@ -1226,9 +1207,6 @@ ngx_set_user(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 
     ngx_core_conf_t  *ccf = conf;
 
-    char             *group;
-    struct passwd    *pwd;
-    struct group     *grp;
     ngx_str_t        *value;
 
     if (ccf->user != (uid_t) NGX_CONF_UNSET_UINT) {
@@ -1248,27 +1226,8 @@ ngx_set_user(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     ccf->username = (char *) value[1].data;
 
     ngx_set_errno(0);
-    pwd = getpwnam((const char *) value[1].data);
-    if (pwd == NULL) {
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errno,
-                           "getpwnam(\"%s\") failed", value[1].data);
-        return NGX_CONF_ERROR;
-    }
-
-    ccf->user = pwd->pw_uid;
-
-    group = (char *) ((cf->args->nelts == 2) ? value[1].data : value[2].data);
-
-    ngx_set_errno(0);
-    grp = getgrnam(group);
-    if (grp == NULL) {
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errno,
-                           "getgrnam(\"%s\") failed", group);
-        return NGX_CONF_ERROR;
-    }
-
-    ccf->group = grp->gr_gid;
-
+//    ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errno,
+//                       "getpwnam(\"%s\") disabled for static build", value[1].data);
     return NGX_CONF_OK;
 
 #endif
diff --git a/src/core/ngx_inet.c b/src/core/ngx_inet.c
index 4228504..d99c71c 100644
--- a/src/core/ngx_inet.c
+++ b/src/core/ngx_inet.c
@@ -1111,95 +1111,9 @@ ngx_parse_inet6_url(ngx_pool_t *pool, ngx_url_t *u)
 }
 
 
-#if (NGX_HAVE_GETADDRINFO && NGX_HAVE_INET6)
-
 ngx_int_t
 ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u)
 {
-    u_char           *host;
-    ngx_uint_t        n;
-    struct addrinfo   hints, *res, *rp;
-
-    host = ngx_alloc(u->host.len + 1, pool->log);
-    if (host == NULL) {
-        return NGX_ERROR;
-    }
-
-    (void) ngx_cpystrn(host, u->host.data, u->host.len + 1);
-
-    ngx_memzero(&hints, sizeof(struct addrinfo));
-    hints.ai_family = AF_UNSPEC;
-    hints.ai_socktype = SOCK_STREAM;
-#ifdef AI_ADDRCONFIG
-    hints.ai_flags = AI_ADDRCONFIG;
-#endif
-
-    if (getaddrinfo((char *) host, NULL, &hints, &res) != 0) {
-        u->err = "host not found";
-        ngx_free(host);
-        return NGX_ERROR;
-    }
-
-    ngx_free(host);
-
-    for (n = 0, rp = res; rp != NULL; rp = rp->ai_next) {
-
-        switch (rp->ai_family) {
-
-        case AF_INET:
-        case AF_INET6:
-            break;
-
-        default:
-            continue;
-        }
-
-        n++;
-    }
-
-    if (n == 0) {
-        u->err = "host not found";
-        goto failed;
-    }
-
-    /* MP: ngx_shared_palloc() */
-
-    for (rp = res; rp != NULL; rp = rp->ai_next) {
-
-        switch (rp->ai_family) {
-
-        case AF_INET:
-        case AF_INET6:
-            break;
-
-        default:
-            continue;
-        }
-
-        if (ngx_inet_add_addr(pool, u, rp->ai_addr, rp->ai_addrlen, n)
-            != NGX_OK)
-        {
-            goto failed;
-        }
-    }
-
-    freeaddrinfo(res);
-    return NGX_OK;
-
-failed:
-
-    freeaddrinfo(res);
-    return NGX_ERROR;
-}
-
-#else /* !NGX_HAVE_GETADDRINFO || !NGX_HAVE_INET6 */
-
-ngx_int_t
-ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u)
-{
-    u_char              *host;
-    ngx_uint_t           i, n;
-    struct hostent      *h;
     struct sockaddr_in   sin;
 
     /* AF_INET only */
@@ -1210,37 +1124,8 @@ ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u)
     sin.sin_addr.s_addr = ngx_inet_addr(u->host.data, u->host.len);
 
     if (sin.sin_addr.s_addr == INADDR_NONE) {
-        host = ngx_alloc(u->host.len + 1, pool->log);
-        if (host == NULL) {
-            return NGX_ERROR;
-        }
-
-        (void) ngx_cpystrn(host, u->host.data, u->host.len + 1);
-
-        h = gethostbyname((char *) host);
-
-        ngx_free(host);
-
-        if (h == NULL || h->h_addr_list[0] == NULL) {
-            u->err = "host not found";
-            return NGX_ERROR;
-        }
-
-        for (n = 0; h->h_addr_list[n] != NULL; n++) { /* void */ }
-
-        /* MP: ngx_shared_palloc() */
-
-        for (i = 0; i < n; i++) {
-            sin.sin_addr.s_addr = *(in_addr_t *) (h->h_addr_list[i]);
-
-            if (ngx_inet_add_addr(pool, u, (struct sockaddr *) &sin,
-                                  sizeof(struct sockaddr_in), n)
-                != NGX_OK)
-            {
-                return NGX_ERROR;
-            }
-        }
 
+        return NGX_OK;
     } else {
 
         /* MP: ngx_shared_palloc() */
@@ -1256,8 +1141,6 @@ ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u)
     return NGX_OK;
 }
 
-#endif /* NGX_HAVE_GETADDRINFO && NGX_HAVE_INET6 */
-
 
 static ngx_int_t
 ngx_inet_add_addr(ngx_pool_t *pool, ngx_url_t *u, struct sockaddr *sockaddr,
diff --git a/src/os/unix/ngx_process_cycle.c b/src/os/unix/ngx_process_cycle.c
index b31485f..cec5fb9 100644
--- a/src/os/unix/ngx_process_cycle.c
+++ b/src/os/unix/ngx_process_cycle.c
@@ -794,59 +794,59 @@ ngx_worker_process_init(ngx_cycle_t *cycle, ngx_int_t worker)
         }
     }
 
-    if (geteuid() == 0) {
-        if (setgid(ccf->group) == -1) {
-            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                          "setgid(%d) failed", ccf->group);
-            /* fatal */
-            exit(2);
-        }
-
-        if (initgroups(ccf->username, ccf->group) == -1) {
-            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                          "initgroups(%s, %d) failed",
-                          ccf->username, ccf->group);
-        }
-
-#if (NGX_HAVE_PR_SET_KEEPCAPS && NGX_HAVE_CAPABILITIES)
-        if (ccf->transparent && ccf->user) {
-            if (prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0) == -1) {
-                ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                              "prctl(PR_SET_KEEPCAPS, 1) failed");
-                /* fatal */
-                exit(2);
-            }
-        }
-#endif
-
-        if (setuid(ccf->user) == -1) {
-            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                          "setuid(%d) failed", ccf->user);
-            /* fatal */
-            exit(2);
-        }
-
-#if (NGX_HAVE_CAPABILITIES)
-        if (ccf->transparent && ccf->user) {
-            struct __user_cap_data_struct    data;
-            struct __user_cap_header_struct  header;
-
-            ngx_memzero(&header, sizeof(struct __user_cap_header_struct));
-            ngx_memzero(&data, sizeof(struct __user_cap_data_struct));
-
-            header.version = _LINUX_CAPABILITY_VERSION_1;
-            data.effective = CAP_TO_MASK(CAP_NET_RAW);
-            data.permitted = data.effective;
-
-            if (syscall(SYS_capset, &header, &data) == -1) {
-                ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
-                              "capset() failed");
-                /* fatal */
-                exit(2);
-            }
-        }
-#endif
-    }
+//    if (geteuid() == 0) {
+//        if (setgid(ccf->group) == -1) {
+//            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
+//                          "setgid(%d) failed", ccf->group);
+//            /* fatal */
+//            exit(2);
+//        }
+//
+//        if (initgroups(ccf->username, ccf->group) == -1) {
+//            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
+//                          "initgroups(%s, %d) failed",
+//                          ccf->username, ccf->group);
+//        }
+//
+//#if (NGX_HAVE_PR_SET_KEEPCAPS && NGX_HAVE_CAPABILITIES)
+//        if (ccf->transparent && ccf->user) {
+//            if (prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0) == -1) {
+//                ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
+//                              "prctl(PR_SET_KEEPCAPS, 1) failed");
+//                /* fatal */
+//                exit(2);
+//            }
+//        }
+//#endif
+//
+//        if (setuid(ccf->user) == -1) {
+//            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
+//                          "setuid(%d) failed", ccf->user);
+//            /* fatal */
+//            exit(2);
+//        }
+//
+//#if (NGX_HAVE_CAPABILITIES)
+//        if (ccf->transparent && ccf->user) {
+//            struct __user_cap_data_struct    data;
+//            struct __user_cap_header_struct  header;
+//
+//            ngx_memzero(&header, sizeof(struct __user_cap_header_struct));
+//            ngx_memzero(&data, sizeof(struct __user_cap_data_struct));
+//
+//            header.version = _LINUX_CAPABILITY_VERSION_1;
+//            data.effective = CAP_TO_MASK(CAP_NET_RAW);
+//            data.permitted = data.effective;
+//
+//            if (syscall(SYS_capset, &header, &data) == -1) {
+//                ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
+//                              "capset() failed");
+//                /* fatal */
+//                exit(2);
+//            }
+//        }
+//#endif
+//    }
 
     if (worker >= 0) {
         cpu_affinity = ngx_get_cpu_affinity(worker);
